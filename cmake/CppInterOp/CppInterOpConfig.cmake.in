# This file allows users to call find_package(CppInterOp) and pick up our targets.

# Compute the installation prefix from this CppInterOpConfig.cmake file location.
get_filename_component(CPPINTEROP_INSTALL_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(CPPINTEROP_INSTALL_PREFIX "${CPPINTEROP_INSTALL_PREFIX}" PATH)
get_filename_component(CPPINTEROP_INSTALL_PREFIX "${CPPINTEROP_INSTALL_PREFIX}" PATH)
get_filename_component(CPPINTEROP_INSTALL_PREFIX "${CPPINTEROP_INSTALL_PREFIX}" PATH)

# Determine CMAKE_SHARED_LIBRARY_SUFFIX based on operating system
include(CMakeSystemSpecificInformation)

### build/install workaround
if (@BUILD_SHARED_LIBS@)
  set(__lib_suffix ${CMAKE_SHARED_LIBRARY_SUFFIX})
  set(__lib_prefix ${CMAKE_SHARED_LIBRARY_PREFIX})
else()    
  set(__lib_suffix ${CMAKE_STATIC_LIBRARY_SUFFIX})
  set(__lib_prefix ${CMAKE_STATIC_LIBRARY_PREFIX})
endif()

if (IS_DIRECTORY "${CPPINTEROP_INSTALL_PREFIX}/include")
  set(_include "${CPPINTEROP_INSTALL_PREFIX}/include")
  set(_libs "${CPPINTEROP_INSTALL_PREFIX}/lib/${__lib_prefix}clangCppInterOp${__lib_suffix}")
else()
  set(_include "@CMAKE_CURRENT_SOURCE_DIR@/include")
  set(_libs "@CMAKE_CURRENT_BINARY_DIR@/lib/${__lib_prefix}clangCppInterOp${__lib_suffix}")
endif()

###

set(CPPINTEROP_EXPORTED_TARGETS "clangCppInterOp")
set(CPPINTEROP_CMAKE_DIR "${_cmake}")
set(CPPINTEROP_INCLUDE_DIRS "${_include}")
set(CPPINTEROP_LIBRARIES "${_libs}")

# Provide all our library targets to users.
if (@BUILD_SHARED_LIBS@)
  add_library(clangCppInterOp SHARED IMPORTED)
else()    
  add_library(clangCppInterOp STATIC IMPORTED)
endif()
set_property(TARGET clangCppInterOp PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${_include}")
set_property(TARGET clangCppInterOp PROPERTY IMPORTED_LOCATION "${_libs}")

unset(_cmake)
unset(_include)
unset(_libs)
