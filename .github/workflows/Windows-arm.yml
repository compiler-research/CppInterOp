name: Windows-arm
on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  release:
    types: [published]
  schedule:
    - cron: '30 20 * * *' # Warning: Timezone dep - 20:00 is 1:00

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: win11-msvc-clang-repl-20
            os: windows-11-arm
            compiler: msvc
            clang-runtime: '20'
            cling: Off
            llvm_enable_projects: "clang"
            llvm_targets_to_build: "host;NVPTX"
          - name: win11-msvc-clang18-cling
            os: windows-11-arm
            compiler: msvc
            clang-runtime: '18'
            cling: On
            cling-version: '1.2'
            llvm_enable_projects: "clang"
            llvm_targets_to_build: "host;NVPTX"

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Save PR Info on Windows systems
      run: |
        #can be found
        mkdir  ./pr
        echo "${{ github.event.number }}" > ./pr/NR
        echo ${{ github.repository }} > ./pr/REPO

        if ( "${{ matrix.cling }}" -imatch "On" )
        {
          $env:CLING_HASH_TEMP = ( git ls-remote https://github.com/root-project/cling.git refs/tags/v${{ matrix.cling-version }} )
          $env:CLING_HASH = $env:CLING_HASH_TEMP -replace "\t","-"
        }
        else
        {
          $env:CLING_HASH="Repl"
          # May need to revert back to both having same llvm_hash, as below cause llvm to be rebuilt everytime commit is made to llvm/llvm-project for release a.x
          # which could be quite often for new releases
          $env:LLVM_HASH_TEMP = (git ls-remote https://github.com/llvm/llvm-project.git refs/heads/release/${{ matrix.clang-runtime}}.x )
          $env:LLVM_HASH = $env:LLVM_HASH_TEMP -replace "\t","-"
        }

        echo "CLING_HASH=$env:CLING_HASH"
        echo "LLVM_HASH=$env:LLVM_HASH"

        echo "CLING_HASH=$env:CLING_HASH" >> $GITHUB_ENV
        echo "LLVM_HASH=$env:LLVM_HASH" >> $GITHUB_ENV

    - name: Restore Cache LLVM/Clang runtime build directory
      uses: actions/cache/restore@v4
      id: cache
      with:
        path: |
          llvm-project
          ${{ matrix.cling=='On' && 'cling' || '' }}
        key: ${{ env.CLING_HASH }}-${{ runner.os }}-${{ matrix.os }}-${{ matrix.compiler }}-clang-${{ matrix.clang-runtime }}.x-patch-${{ hashFiles(format('patches/llvm/clang{0}-*.patch', matrix.clang-runtime)) || 'none' }}

    - name: Setup default Build Type on Windows
      run: |
        echo "BUILD_TYPE=Release" >> $env:GITHUB_ENV
        echo "CODE_COVERAGE=0" >>  $env:GITHUB_ENV
        $env:ncpus=$([Environment]::ProcessorCount)
        echo "ncpus=$env:ncpus" >> $env:GITHUB_ENV

    - name: Setup compiler on Windows
      run: |
        if ( "${{ matrix.compiler }}" -imatch "clang" )
        {
          $ver="${{ matrix.compiler }}".split("-")[1]
          choco install llvm --version=$ver --no-progress -my
          clang --version
          #
          $env:CC="clang"
          $env:CXX="clang++"
          echo "CC=clang" >> $env:GITHUB_ENV
          echo "CXX=clang++" >> $env:GITHUB_ENV
        }
        elseif ( "${{ matrix.compiler }}" -imatch "msvc" )
        {
          # MSVC is builtin in container image
        }
        else
        {
          echo "Unsupported compiler - fix YAML file"
        }

    - name: Install deps on Windows
      run: |
        choco install findutils
        $env:PATH="C:\Program Files (x86)\GnuWin32\bin;$env:PATH"

    - uses: ./.github/actions/Build_LLVM
      with:
        cache-hit: ${{ steps.cache.outputs.cache-hit }}

    - name: Save Cache LLVM/Clang runtime build directory
      uses: actions/cache/save@v4
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      with:
        path: |
          llvm-project
          ${{ matrix.cling=='On' && 'cling' || '' }}
        key: ${{ steps.cache.outputs.cache-primary-key }}

    - uses: ./.github/actions/Build_and_Test_CppInterOp

    - name: Setup tmate session
      if: ${{ failure() && runner.debug }}
      uses: mxschmitt/action-tmate@v3
      # When debugging increase to a suitable value!
      timeout-minutes: 30
