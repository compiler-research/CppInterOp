name: 'Builds and test cppyy'
description: 'This action builds and tests cppyy for native platforms'

runs:
  using: composite
  steps:
    - name: Build and Install cppyy-backend
      if: ${{ matrix.cppyy == 'On' && runner.os != 'Windows' }}
      shell: bash
      run: |
        # Download cppyy-backend
        git clone --depth=1 https://github.com/compiler-research/cppyy-backend.git
        cd cppyy-backend
        mkdir -p $CPPINTEROP_DIR/lib build && cd build
        # Install CppInterOp
        (cd $CPPINTEROP_BUILD_DIR && cmake --build . --target install --parallel ${{ env.ncpus }} )
        # Build and Install cppyy-backend
        cmake -DCppInterOp_DIR=$CPPINTEROP_DIR -DINCLUDE_PATH="$env:CPLUS_INCLUDE_PATH" ..
        cmake --build . --parallel ${{ env.ncpus }}
        os="${{ matrix.os }}"
        if [[ "${os}" == "macos"* ]]; then
          cp libcppyy-backend.dylib $CPPINTEROP_DIR/lib/
        else
          cp libcppyy-backend.so $CPPINTEROP_DIR/lib/
        fi
        cd ..

    - name: Install CPyCppyy
      if: ${{ matrix.cppyy == 'On' && runner.os != 'Windows' }}
      shell: bash
      run: |
        python3 -m venv .venv
        source .venv/bin/activate
        # Install CPyCppyy
        git clone --depth=1 https://github.com/compiler-research/CPyCppyy.git
        mkdir CPyCppyy/build
        cd CPyCppyy/build
        cmake ..
        cmake --build . --parallel ${{ env.ncpus }}
        #
        export CPYCPPYY_DIR=$PWD
        cd ../..
        # We need CPYCPPYY_DIR later
        echo "CPYCPPYY_DIR=$CPYCPPYY_DIR" >> $GITHUB_ENV

    - name: Install cppyy
      if: ${{ matrix.cppyy == 'On' && runner.os != 'Windows' }}
      shell: bash
      run: |
        # source virtual environment
        source .venv/bin/activate
        # Install cppyy
        git clone --depth=1 https://github.com/compiler-research/cppyy.git
        cd cppyy
        python -m pip install --upgrade . --no-deps
        cd ..

    - name: Run cppyy
      if: ${{ matrix.cppyy == 'On' && runner.os != 'Windows' }}
      shell: bash
      run: |
        # Run cppyy
        source .venv/bin/activate
        export PYTHONPATH=$PYTHONPATH:$CPYCPPYY_DIR:$CB_PYTHON_DIR
        python -c "import cppyy"
        # We need PYTHONPATH later
        echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV

    - name: Run the tests
      if: ${{ matrix.cppyy == 'On' && runner.os != 'Windows' }}
      shell: bash
      run: |
        # Run the tests
        source .venv/bin/activate
        cd cppyy/test
        echo ::group::Prepare For Testing
        make all
        python -m pip install --upgrade pip
        python -m pip install pytest
        python -m pip install pytest-xdist
        python -m pip install numba
        echo ::endgroup::
        echo ::group::Run complete test suite
        set -o pipefail
        python -m pytest -sv -ra | tee complete_testrun.log 2>&1
        set +o pipefail
        echo ::group::Crashing Test Logs
        # See if we don't have a crash that went away
        # Comment out all xfails but the ones that have a run=False condition.
        find . -name "*.py" -exec sed -i '/run=False/!s/^ *@mark.xfail\(.*\)/#&/' {} \;
        python -m pytest -n 1 -m "xfail" --runxfail -sv -ra --max-worker-restart 512 | tee test_crashed.log 2>&1 || true
        git checkout .
        echo ::endgroup::
        echo ::group::XFAIL Test Logs
        # Rewrite all xfails that have a run clause to skipif. This way we will
        # avoid conditionally crashing xfails
        find . -name "*.py" -exec sed -i -E 's/(^ *)@mark.xfail\(run=(.*)/\1@mark.skipif(condition=not \2/g' {} \;
        # See if we don't have an xfail that went away
        python -m pytest --runxfail -sv -ra  | tee test_xfailed.log 2>&1 || true
        git checkout .
        echo ::endgroup::
        echo ::group::Passing Test Logs

        # Run the rest of the non-crashing tests.
        declare -i RETCODE=0

        set -o pipefail
        os="${{ matrix.os }}"
        if [[ "${os}" != "macos"* ]]; then
          echo "Running valgrind on passing tests"
          CLANG_VERSION="${{ matrix.clang-runtime }}"

          if [[ "${{ matrix.cling }}" == "On" ]]; then
            CLANG_INTERPRETER="cling"
          else
            CLANG_INTERPRETER="clang"
          fi
        
          if [[ "${{ matrix.os }}" == *"arm"* ]]; then
            SUPPRESSION_FILE="../etc/${CLANG_INTERPRETER}${CLANG_VERSION}-valgrind_arm.supp"
          else
            SUPPRESSION_FILE="../etc/${CLANG_INTERPRETER}${CLANG_VERSION}-valgrind.supp"
          fi
          export IS_VALGRIND=true
          valgrind --show-error-list=yes --error-exitcode=1 --track-origins=yes --gen-suppressions=all --suppressions="${SUPPRESSION_FILE}" --suppressions=../etc/valgrind-cppyy-cling.supp python -m pytest -m "not xfail" -sv -ra --ignore=test_leakcheck.py
          unset IS_VALGRIND
        fi
        export RETCODE=+$?
        echo ::endgroup::

        RETCODE=+$?

        echo "Complete Test Suite Summary: \n"
        tail -n1 complete_testrun.log
        echo "Crashing Summary: \n"
        tail -n1 test_crashed.log
        echo "XFAIL Summary:"
        tail -n1 test_xfailed.log
        echo "Return Code: ${RETCODE}"
        exit $RETCODE

    - name: Build and Install cppyy-backend
      if: ${{ matrix.cppyy == 'On' && runner.os == 'Windows' }}
      shell: powershell
      run: |
        # Download cppyy-backend
        git clone --depth=1 https://github.com/compiler-research/cppyy-backend.git
        cd cppyy-backend
        mkdir $env:CPPINTEROP_DIR\lib
        mkdir build
        cd build
        # Install CppInterOp
        cd $env:CPPINTEROP_BUILD_DIR
        cmake --build . --target install --parallel ${{ env.ncpus }}
        cd ..\cppyy-backend\build\
        # Build and Install cppyy-backend
        cmake -DCppInterOp_DIR=$env:CPPINTEROP_DIR -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} ..
        cmake --build . --config ${{ env.BUILD_TYPE }} --parallel ${{ env.ncpus }}
        cp Release\libcppyy-backend.lib $env:CPPINTEROP_DIR\lib\
        cd ..

    - name: Install CPyCppyy
      if: ${{ matrix.cppyy == 'On' && runner.os == 'Windows' }}
      shell: powershell
      run: |
        python -m venv .venv
        . .\.venv\Scripts\Activate.ps1
        # Install CPyCppyy
        git clone --depth=1 https://github.com/compiler-research/CPyCppyy.git
        mkdir CPyCppyy\build
        cd CPyCppyy\build
        cmake ..
        cmake --build . --parallel ${{ env.ncpus }}
        #
        env:CPYCPPYY_DIR = $PWD.Path
        cd ../..
        # We need CPYCPPYY_DIR later
        echo "CPYCPPYY_DIR=$env:CPYCPPYY_DIR" >> $env:GITHUB_ENV

    - name: Install cppyy
      if: ${{ matrix.cppyy == 'On' && runner.os == 'Windows' }}
      shell: powershell
      run: |
        # source virtual environment
        . .\.venv\Scripts\Activate.ps1
        # Install cppyy
        git clone --depth=1 https://github.com/compiler-research/cppyy.git
        cd cppyy
        python -m pip install --upgrade . --no-deps
        cd ..

    - name: Run cppyy
      if: ${{ matrix.cppyy == 'On' && runner.os == 'Windows' }}
      shell: powershell
      run: |
        # Run cppyy
        . .\.venv\Scripts\Activate.ps1
        $env:PYTHONPATH=$env:PYTHONPATH:$env:CPYCPPYY_DIR:$env:CB_PYTHON_DIR
        python -c "import cppyy"
        # We need PYTHONPATH later
        echo "PYTHONPATH=$env:PYTHONPATH" >> $GITHUB_ENV

    - name: Run the tests
      if: ${{ matrix.cppyy == 'On' && runner.os == 'Windows' }}
      shell: powershell
      run: |
        # Run the tests
        . .\.venv\Scripts\Activate.ps1
        cd cppyy\test
        echo ::group::Prepare For Testing
        make all
        python -m pip install --upgrade pip
        python -m pip install pytest
        python -m pip install pytest-xdist
        python -m pip install numba
        echo ::endgroup::
        echo ::group::Run complete test suite
        $ErrorActionPreference = "Stop"
        python -m pytest -sv -ra 2>&1 | Tee-Object -FilePath complete_testrun.log
        $ErrorActionPreference = "Continue"
        echo ::group::Crashing Test Logs
        # See if we don't have a crash that went away
        # Comment out all xfails but the ones that have a run=False condition.
        find.exe . -name "*.py" -exec sed.exe -i '/run=False/!s/^ *@mark.xfail\(.*\)/#&/' {} \;
        python -m pytest -n 1 -m "xfail" --runxfail -sv -ra --max-worker-restart 512 2>&1 | Tee-Object -FilePath test_crashed.log
        $LASTEXITCODE = 0
        git checkout .
        echo ::endgroup::
        echo ::group::XFAIL Test Logs
        # Rewrite all xfails that have a run clause to skipif. This way we will
        # avoid conditionally crashing xfails
        find.exe . -name "*.py" -exec sed.exe -i -E 's/(^ *)@mark.xfail\(run=(.*)/\1@mark.skipif(condition=not \2/g' {} \;
        # See if we don't have an xfail that went away
        python -m pytest --runxfail -sv -ra  | tee test_xfailed.log 2>&1 || true
        git checkout .
        echo ::endgroup::
