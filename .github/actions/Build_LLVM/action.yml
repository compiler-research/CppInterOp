name: 'Builds LLVM'
description: 'This action builds LLVM for native platforms'
inputs:
  cache-hit:
    required: true

runs:
  using: composite
  steps:
    - name: Build LLVM/Cling if the cache is invalid
      if: ${{ inputs.cache-hit != 'true'  && runner.os != 'Windows' }}
      shell: bash
      run: |
        cling_on=$(echo "${{ matrix.cling }}" | tr '[:lower:]' '[:upper:]')
        if [[ "${cling_on}" == "ON" ]]; then
          git clone https://github.com/root-project/cling.git
          cd ./cling
          git checkout tags/v${{ matrix.cling-version }}
          git apply -v ../patches/llvm/cling1.2-LookupHelper.patch
          cd ..
          git clone --depth=1 -b cling-llvm${{ matrix.clang-runtime }} https://github.com/root-project/llvm-project.git
        else # repl
          git clone --depth=1 -b release/${{ matrix.clang-runtime }}.x https://github.com/llvm/llvm-project.git
        fi
        cd llvm-project
        # Build
        mkdir build
        if [[ "${cling_on}" == "ON" ]]; then
          cd build
          cmake -DLLVM_ENABLE_PROJECTS="${{ matrix.llvm_enable_projects }}" \
                -DLLVM_EXTERNAL_PROJECTS=cling                     \
                -DLLVM_EXTERNAL_CLING_SOURCE_DIR=../../cling       \
                -DLLVM_TARGETS_TO_BUILD="${{ matrix.llvm_targets_to_build }}" \
                -DCMAKE_BUILD_TYPE=Release                         \
                -DLLVM_ENABLE_ASSERTIONS=ON                        \
                -DCLANG_ENABLE_STATIC_ANALYZER=OFF                 \
                -DCLANG_ENABLE_ARCMT=OFF                           \
                -DCLANG_ENABLE_FORMAT=OFF                          \
                -DCLANG_ENABLE_BOOTSTRAP=OFF                       \
                -G Ninja                                           \
                ../llvm
          ninja clang -j ${{ env.ncpus }}
          ninja LLVMOrcDebugging -j ${{ env.ncpus }}
          ninja clingInterpreter -j ${{ env.ncpus }}
        else
          # Apply patches
          llvm_vers=$(echo "${{ matrix.clang-runtime }}" | tr '[:lower:]' '[:upper:]')
          if [[ "${llvm_vers}" == "16" ]]||[[ "${llvm_vers}" == "17" ]]; then
            git apply -v ../patches/llvm/clang${{ matrix.clang-runtime }}-*.patch
            echo "Apply clang${{ matrix.clang-runtime }}-*.patch patches:"
          fi
          if [[ "${{ matrix.oop-jit }}" == "On" ]]; then
            git apply -v ../patches/llvm/clang20-2-out-of-process-jit-execution.patch
            echo "Apply out-of-process-jit-execution.patch:"
          fi
          cd build
          cmake -DLLVM_ENABLE_PROJECTS="${{ matrix.llvm_enable_projects}}" \
                -DLLVM_TARGETS_TO_BUILD="${{ matrix.llvm_targets_to_build }}"  \
                -DCMAKE_BUILD_TYPE=Release                          \
                -DLLVM_ENABLE_ASSERTIONS=ON                         \
                -DCLANG_ENABLE_STATIC_ANALYZER=OFF                  \
                -DCLANG_ENABLE_ARCMT=OFF                            \
                -DCLANG_ENABLE_FORMAT=OFF                           \
                -DCLANG_ENABLE_BOOTSTRAP=OFF                        \
                -G Ninja                                            \
                -DLLVM_INCLUDE_BENCHMARKS=OFF                   \
                -DLLVM_INCLUDE_EXAMPLES=OFF                     \
                -DLLVM_INCLUDE_TESTS=OFF                        \
                ../llvm
          ninja clang clangInterpreter clangStaticAnalyzerCore -j ${{ env.ncpus }}
          if [[ "${{ matrix.oop-jit }}" == "On" ]]; then
            if [ "${{ matrix.os }}}" == "macos"*  ]; then SUFFIX="_osx"; fi
            ninja clang_repl llvm-jitlink-executor orc_rt${SUFFIX} -j ${{ env.ncpus }}
          fi
          cd ./tools/
          rm -rf $(find . -maxdepth 1 ! -name "clang" ! -name ".")
          cd ..
          rm compile_commands.json build.ninja
        fi
        cd ../
        rm -rf $(find . -maxdepth 1 ! -name "build" ! -name "llvm" ! -name "clang" ! -name ".")
        if [[ "${cling_on}" == "ON" ]]; then
          cd ./llvm/
          rm -rf $(find . -maxdepth 1 ! -name "include" ! -name "lib" ! -name "cmake" ! -name "utils" ! -name ".")
          cd ../clang/
          rm -rf $(find . -maxdepth 1 ! -name "include" ! -name "lib" ! -name "cmake" ! -name "utils" ! -name ".")
          cd ../../cling/
          rm -rf $(find . -maxdepth 1 ! -name "include" ! -name "lib" ! -name "cmake" ! -name ".")
        else # repl
          cd ./llvm/
          rm -rf $(find . -maxdepth 1 ! -name "include" ! -name "lib" ! -name "cmake" ! -name ".")
          cd ../clang/
          rm -rf $(find . -maxdepth 1 ! -name "include" ! -name "lib" ! -name "cmake" ! -name ".")
          cd ../..
        fi


    - name: Build LLVM/Cling on Windows systems if the cache is invalid
      if: ${{ inputs.cache-hit != 'true'  && runner.os == 'Windows' }}
      shell: powershell
      run: |

        if ( "${{ matrix.cling }}" -imatch "On" )
        {
          git clone https://github.com/root-project/cling.git
          cd ./cling
          git checkout tags/v${{ matrix.cling-version }}
          git apply -v ../patches/llvm/cling1.2-LookupHelper.patch
          cd ..
          git clone --depth=1 -b cling-llvm${{ matrix.clang-runtime }} https://github.com/root-project/llvm-project.git
          $env:PWD_DIR= $PWD.Path
          $env:CLING_DIR="$env:PWD_DIR\cling"
          echo "CLING_DIR=$env:CLING_DIR"
        }
        else
        {
          git clone --depth=1 -b release/${{ matrix.clang-runtime }}.x https://github.com/llvm/llvm-project.git
        }

        cd llvm-project
        # Build
        mkdir build
        if ( "${{ matrix.cling }}" -imatch "On" )
        {
          cd build
          cmake -DLLVM_ENABLE_PROJECTS="${{ matrix.llvm_enable_projects}}" `
                -DLLVM_EXTERNAL_PROJECTS=cling                `
                -DLLVM_EXTERNAL_CLING_SOURCE_DIR="$env:CLING_DIR"   `
                -DLLVM_TARGETS_TO_BUILD="${{ matrix.llvm_targets_to_build }}" `
                -DCMAKE_BUILD_TYPE=Release                         `
                -DLLVM_ENABLE_ASSERTIONS=ON                        `
                -DCLANG_ENABLE_STATIC_ANALYZER=OFF                 `
                -DCLANG_ENABLE_ARCMT=OFF                           `
                -DCLANG_ENABLE_FORMAT=OFF                          `
                -DCLANG_ENABLE_BOOTSTRAP=OFF                       `
                ..\llvm
          cmake --build . --config Release --target clang --parallel ${{ env.ncpus }}
          cmake --build . --config Release --target LLVMOrcDebugging --parallel ${{ env.ncpus }}
          cmake --build . --config Release --target clingInterpreter --parallel ${{ env.ncpus }}
        }
        else
        {
          cp -r ..\patches\llvm\clang${{ matrix.clang-runtime }}*
          #FIXME: Apply patches without hardcoding
          if ( "${{ matrix.clang-runtime }}" -imatch "16" )
          {
            git apply -v clang16-1-Value.patch
            git apply -v clang16-2-CUDA.patch
            git apply -v clang16-3-WeakRef.patch
          }
          elseif ( "${{ matrix.clang-runtime }}" -imatch "17" )
          {
            git apply -v clang17-1-NewOperator.patch
          }
          cd build
          echo "Apply clang${{ matrix.clang-runtime }}-*.patch patches:"
          cmake -DLLVM_ENABLE_PROJECTS="${{ matrix.llvm_enable_projects}}"                   `
                -DLLVM_TARGETS_TO_BUILD="${{ matrix.llvm_targets_to_build }}"          `
                -DCMAKE_BUILD_TYPE=Release                          `
                -DLLVM_ENABLE_ASSERTIONS=ON                         `
                -DCLANG_ENABLE_STATIC_ANALYZER=OFF                  `
                -DCLANG_ENABLE_ARCMT=OFF                            `
                -DCLANG_ENABLE_FORMAT=OFF                           `
                -DCLANG_ENABLE_BOOTSTRAP=OFF                        `
                ..\llvm
          cmake --build . --config Release --target clang clangInterpreter clangStaticAnalyzerCore --parallel ${{ env.ncpus }}
        }
        cd ..\
        rm -r -force $(find.exe . -maxdepth 1 ! -name "build" ! -name "llvm" ! -name "clang" ! -name ".")
        if ( "${{ matrix.cling }}" -imatch "On" )
        {
          cd .\llvm\
          rm -r -force $(find.exe . -maxdepth 1 ! -name "include" ! -name "lib" ! -name "cmake" ! -name "utils" ! -name ".")
          cd ..\clang\
          rm -r -force $(find.exe . -maxdepth 1 ! -name "include" ! -name "lib" ! -name "cmake" ! -name "utils" ! -name ".")
          cd ..\..\cling\
          rm -r -force $(find.exe . -maxdepth 1 ! -name "include" ! -name "lib" ! -name "cmake" ! -name ".")
        }
        else
        {
          cd .\llvm\
          rm -r -force $(find.exe . -maxdepth 1 ! -name "include" ! -name "lib" ! -name "cmake" ! -name ".")
          cd ..\clang\
          rm -r -force $(find.exe . -maxdepth 1 ! -name "include" ! -name "lib" ! -name "cmake"  ! -name ".")
          cd ..\..
        }
